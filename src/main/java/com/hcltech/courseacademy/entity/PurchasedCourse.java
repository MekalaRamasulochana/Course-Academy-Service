package com.hcltech.courseacademy.entity;

import javax.persistence.*;
import java.time.LocalDate; // Only LocalDate is needed
import java.util.Objects;

@Entity
@Table(name = "purchased_courses")
public class PurchasedCourse {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private LocalDate purchaseDate;

    @Column(nullable = false)
    private boolean completed;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "student_id", nullable = false)
    private Student student;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "course_id", nullable = false)
    private Course course;

    // Constructors
    public PurchasedCourse() {}

    // Constructor for creating new instances (ID will be generated by DB)
    public PurchasedCourse(Student student, Course course, LocalDate purchaseDate, boolean completed) {
        this.student = student;
        this.course = course;
        this.purchaseDate = purchaseDate;
        this.completed = completed;
    }

    // Constructor for recreating instances where ID is already known (e.g., from DTO mapping)
    public PurchasedCourse(Long id, Student student, Course course, LocalDate purchaseDate, boolean completed) {
        this(student, course, purchaseDate, completed); // Call the other constructor
        this.id = id;
    }

    // Getters
    public Long getId() { return id; }
    public Student getStudent() { return student; }
    public Course getCourse() { return course; }
    public LocalDate getPurchaseDate() { return purchaseDate; }
    public boolean isCompleted() { return completed; }

    // Setters
    public void setId(Long id) { this.id = id; }
    public void setStudent(Student student) { this.student = student; }
    public void setCourse(Course course) { this.course = course; }
    public void setPurchaseDate(LocalDate purchaseDate) { this.purchaseDate = purchaseDate; }
    public void setCompleted(boolean completed) { this.completed = completed; }

    // Overrides
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        PurchasedCourse that = (PurchasedCourse) o;
        return id != null && Objects.equals(id, that.id);
    }

    @Override
    public int hashCode() { return Objects.hash(id); }

    @Override
    public String toString() {
        return "PurchasedCourse{" +
                "id=" + id +
                ", studentId=" + (student != null ? student.getId() : "null") +
                ", courseId=" + (course != null ? course.getId() : "null") +
                ", purchaseDate=" + purchaseDate +
                ", completed=" + completed +
                '}';
    }
}