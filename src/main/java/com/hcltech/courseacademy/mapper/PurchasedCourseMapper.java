package com.hcltech.courseacademy.mapper; // Create a new 'mapper' package

import com.hcltech.courseacademy.dto.PurchasedCourseDTO;
import com.hcltech.courseacademy.entity.PurchasedCourse;
import com.hcltech.courseacademy.entity.Student;
import com.hcltech.courseacademy.entity.Course;
import java.time.LocalDate; // Ensure LocalDate is used here

public class PurchasedCourseMapper {

    // Converts Entity to DTO
    public static PurchasedCourseDTO toDto(PurchasedCourse entity) {
        if (entity == null) {
            return null;
        }
        return new PurchasedCourseDTO(
                entity.getId(),
                entity.getStudent() != null ? entity.getStudent().getId() : null,
                entity.getCourse() != null ? entity.getCourse().getId() : null,
                entity.getPurchaseDate(), // Direct use of LocalDate
                entity.isCompleted()
        );
    }

    // Converts DTO to Entity (for creation)
    // Note: This method typically doesn't set ID, Student, or Course directly
    // as those are usually fetched/set in the service based on IDs from DTO.
    // This is more for mapping simple fields.
    public static PurchasedCourse toEntity(PurchasedCourseDTO dto) {
        if (dto == null) {
            return null;
        }
        // When mapping from DTO to entity, you'd typically handle Student/Course
        // relationships separately in the service by fetching them.
        // This mapper assumes you're only setting the date and completion status initially.
        return new PurchasedCourse(
                null, // ID is generated by DB
                null, // Student will be set by service
                null, // Course will be set by service
                dto.getPurchaseDate(),
                dto.getCompleted() != null ? dto.getCompleted() : false // Default if null
        );
    }
}